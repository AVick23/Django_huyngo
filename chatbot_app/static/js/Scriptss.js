// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
const messageInput = document.getElementById('messageInput');
const messageForm = document.getElementById('messageForm');
const submitBtn = document.getElementById('submitBtn');
const chatbox = document.getElementById('chatbox');
const menuButton = document.getElementById('menuButton');
const toggleButton = document.getElementById('theme-toggle');
const icon = document.getElementById('icon');

document.addEventListener("DOMContentLoaded", function() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Session Storage
    const savedMessages = JSON.parse(sessionStorage.getItem('chatMessages')) || [];
    savedMessages.forEach(function(message) {
        const messageElement = createMessageElement(message.type, message.content, message.html);
        chatbox.appendChild(messageElement);
        animateMessage(messageElement);
        messageElement.scrollIntoView();
    });

    messageForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const message = messageInput.value;
        messageInput.value = '';

        const userMessage = createMessageElement('user', message);
        chatbox.appendChild(userMessage);
        animateMessage(userMessage);
        userMessage.scrollIntoView();

        saveMessageToSession('user', message, userMessage.outerHTML); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Session Storage

        if (!sessionStorage.getItem('sessionId')) {
            sessionStorage.setItem('sessionId', Date.now());
        }
        var sessionId = sessionStorage.getItem('sessionId');  

        fetch('/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            },
            body: JSON.stringify({ message: message }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.secretCodeMatched) {
                const loginModal = document.createElement('div');
                loginModal.className = 'my-custom-modal';

                const modalContent = document.createElement('div');
                modalContent.className = 'my-modal-content';
                const loginForm = `
                    <h2>–í–≤–µ–¥–∏—Ç–µ –õ–æ–≥–∏–Ω –∏ –ü–∞—Ä–æ–ª—å</h2>
                    <form id="loginForm">
                        <label for="username">–õ–æ–≥–∏–Ω:</label>
                        <input type="text" id="username" name="username" required>
                        <br>
                        <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                        <input type="password" id="password" name="password" required>
                        <br>
                        <button type="submit">–í–æ–π—Ç–∏</button>
                    </form>
                `;

                modalContent.innerHTML = loginForm;
                loginModal.appendChild(modalContent);
                document.body.appendChild(loginModal);

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                loginModal.style.display = 'block';
                



                document.getElementById('loginForm').addEventListener('submit', function(event) {
                    event.preventDefault();
                    const username = document.getElementById('username').value;
                    const password = document.getElementById('password').value;

                    fetch('/login/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                        },
                        body: JSON.stringify({ username: username, password: password }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/new_site/';
                        } else {
                            // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                            const errorMessage = document.createElement('p');
                            errorMessage.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
                            modalContent.appendChild(errorMessage);
                        }
                        window.addEventListener('click', function(event) {
                            if (event.target == loginModal) {
                                loginModal.style.display = 'none';
                            }
                        });        
                    });
                });

                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
            }

            // –î–∞–ª–µ–µ –∏–¥–µ—Ç –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (data.suggestedQuestions && data.suggestedQuestions.length > 0) {
                const suggestionMessage = createMessageElement('bot', '–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É —ç—Ç–æ?');
                const buttonsContainer = document.createElement('div'); 
                buttonsContainer.classList.add('button-container');

                data.suggestedQuestions.forEach(question => {
                    const buttonElement = document.createElement('button'); 
                    buttonElement.textContent = question.question; 
                    buttonElement.classList.add('custom-button'); 

                    buttonElement.addEventListener('click', function() {
                        const userQuestion = question.question;
                        const botAnswer = question.answer;

                        const userQuestionMessage = createMessageElement('user', userQuestion);
                        chatbox.appendChild(userQuestionMessage);
                        animateMessage(userQuestionMessage);
                        userQuestionMessage.scrollIntoView();

                        const botAnswerMessage = createMessageElement('bot', ''); 
                        chatbox.appendChild(botAnswerMessage); 
                        animateMessage(botAnswerMessage);
                        botAnswerMessage.scrollIntoView();

                        let i = 0;
                        const typing = setInterval(function() {
                            if (i < botAnswer.length) {
                                botAnswerMessage.textContent += botAnswer[i];
                                i++;
                            } else {
                                clearInterval(typing);

                                if (typeof botAnswer === 'string') {
                                    var urlRegex = /(https?:\/\/[^\s]+)/g;
                                    var urls = botAnswer.match(urlRegex);
                                    if (urls) {
                                        urls.forEach(function(url) {
                                            botAnswerMessage.innerHTML +=  `<br><a href="${url}" target="_blank" rel="noopener noreferrer" title="–≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ ${url}">–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a><br>`;
                                        });
                                    }
                                }
                                saveMessageToSession('bot', botAnswerMessage.textContent, botAnswerMessage.outerHTML); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ Session Storage
                            }
                        },);

                        saveMessageToSession('user', userQuestion, userQuestionMessage.outerHTML);
                    });

                    buttonsContainer.appendChild(buttonElement); 
                    buttonsContainer.appendChild(document.createElement('br')); 
                });

                const notFoundButton = document.createElement('button');
                notFoundButton.textContent = '–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? –ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞!';
                notFoundButton.classList.add('custom-button');

                notFoundButton.addEventListener('click', function() {
                    const userQuestion = message; 

                    fetch('/handle_question/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                        },
                        body: JSON.stringify({ message: userQuestion }), 
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const modal = document.createElement('div');
                            modal.className = 'my-custom-modal';
                            const modalContent = document.createElement('div');
                            modalContent.className = 'my-text-container';
                            modalContent.textContent = '–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–∫–æ—Ä–æ –Ω–∞—É—á–∏—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ!üòä';
                            modal.appendChild(modalContent);
                            document.body.appendChild(modal);

                            modal.style.display = 'block';

                            window.addEventListener('click', function(event) {
                                if (event.target == modal) {
                                    modal.style.display = 'none';
                                    modal.remove();
                                }
                            });
                        } else {
                            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', data.error);
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞:', error);
                    });
                });

                buttonsContainer.appendChild(notFoundButton);

                suggestionMessage.appendChild(buttonsContainer);
                chatbox.appendChild(suggestionMessage);
            } else {
                const botMessage = createMessageElement('bot', data.response);
                chatbox.appendChild(botMessage);
                animateMessage(botMessage);
                botMessage.scrollIntoView();

                saveMessageToSession('bot', data.response, botMessage.outerHTML);
            }
        });
    });
});



  window.onscroll = function() {scrollFunction()};

  function scrollFunction() {
    var scrollToBottom = document.getElementById("scrollToBottom");
  
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–µ–ª–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤–≤–µ—Ä—Ö –Ω–∞ 20 –ø–∏–∫—Å–µ–ª–µ–π
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
      scrollToBottom.style.display = "block";
    } else {
      scrollToBottom.style.display = "none";
    }
  }
  
  // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–∫—É
  document.getElementById("scrollToBottom").onclick = function() {
    scrollToBottom();
  };
  
  function scrollToBottom() {
    window.scroll({
      top: document.body.scrollHeight,
      behavior: 'smooth'
    });
  }