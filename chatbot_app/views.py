from django.http import HttpResponse
from django.shortcuts import render
import spacy
import json
from django.views.decorators.csrf import csrf_exempt
from .models import ChatMessage
import os
import subprocess
from django.http import JsonResponse, FileResponse, StreamingHttpResponse
from zipfile import ZipFile, ZIP_DEFLATED
from io import BytesIO
from tempfile import TemporaryDirectory
from py_files.NLP import question_answer_pairs
from py_files.searh_directions import search_directions_strict, search_directions_flexible, get_direction_data, search_similar_questions
from py_files.save_questions import save_question_to_db, get_answer_for_question
import py_files.login
from py_files.get_questions import get_unresolved_questions, reg_answer
from questions import filter_sentences
from django.core.files.storage import FileSystemStorage
import sqlite3

db_path = "py_files/university.sqlite"

# –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Spacy
nlp = spacy.load('ru_core_news_lg')

@csrf_exempt
def chat(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user_message = data.get('message')

        # –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        secret_code = "–°–µ–∫—Ä–µ—Ç"

        if user_message == secret_code:
            return JsonResponse({'secretCodeMatched': True})

        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Spacy
        user_message_doc = nlp(user_message.lower())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        similarities = []
        for pair in question_answer_pairs:
            question = pair['question']
            answer = pair['answer']
            question_doc = nlp(question.lower())
            similarity_score = user_message_doc.similarity(question_doc)
            similarities.append((question, answer, similarity_score))

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-N –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        similarities.sort(key=lambda x: x[2], reverse=True)
        top_similarities = similarities[:3]  # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ –∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ—Ç–≤–µ—Ç—ã
        suggested_responses = [{'question': q[0], 'answer': q[1]} for q in top_similarities]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
        chat_history = request.session.get('chat_history', [])
        chat_history.append({'sender': 'user', 'message': user_message})
        for response in suggested_responses:
            chat_history.append({'sender': 'bot', 'message': response['answer']})
        request.session['chat_history'] = chat_history

        return JsonResponse({'suggestedQuestions': suggested_responses})
    
    # –í–æ–∑–≤—Ä–∞—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤
    return render(request, 'chatbot.html')

@csrf_exempt
def handle_login(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        if username == py_files.login.correct_username and password == py_files.login.correct_password:
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False})

    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})

def new_site(request):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—É—é –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return render(request, 'new_site.html') 

@csrf_exempt
def get_chat_history(request):
    chat_history = request.session.get('chat_history', [])
    return JsonResponse({'chatHistory': chat_history})

@csrf_exempt
def handle_question(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            message = data.get('message', '')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('py_files/university.sqlite')
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                c = conn.cursor()
                # –ó–∞–ø–∏—Å—å –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                c.execute("INSERT INTO QuestionsBot (questions) VALUES (?)", (message,))
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                conn.commit()
                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                conn.close()
                return JsonResponse({'success': True})
            else:
                return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, status=400)
        except json.JSONDecodeError:
            return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON'}, status=400)
    else:
        return JsonResponse({'success': False, 'error': '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω'}, status=405)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é save_message
@csrf_exempt
def save_message(request):
    data = json.loads(request.body)
    message = ChatMessage(
        session_id=data['sessionId'],
        message_text=data['message'],
        is_user=data['isUser'],
    )
    message.save()
    return JsonResponse({'status': 'ok'})

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é load_chat
@csrf_exempt
def load_chat(request):
    data = json.loads(request.body)
    sessionId = data.get('sessionId')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å–∏
    messages = ChatMessage.objects.filter(session_id=sessionId).order_by('timestamp')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON
    messages_data = [{'text': message.message_text, 'isUser': message.is_user, 'signature': message.signature} for message in messages]

    return JsonResponse({'messages': messages_data})
      
def button1(request):
    return HttpResponse('–í—ã –≤—ã–±—Ä–∞–ª–∏: üìò–ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É')

def button2(request):
    return HttpResponse('–í—ã –≤—ã–±—Ä–∞–ª–∏: üìï–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ')

@csrf_exempt
def get_programs(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        area = data.get('area')
        subjects = data.get('subjects')
        form = data.get('form')
        payment = data.get('payment')
        search_type = data.get('search_type')

        # –ø–µ—Ä–µ–¥–∞–≤ –≤ –Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:
        if search_type == '–°—Ç—Ä–æ–≥–∏–π':
            directions = search_directions_strict(area, subjects, form)
        else:
            directions = search_directions_flexible(area, subjects, form)

        return JsonResponse(directions, safe=False)
    
@csrf_exempt
def get_direction_info(request):
    if request.method == 'POST':
        data = json.loads(request.body)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        direction = data.get('direction')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        direction_info = get_direction_data(direction)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        return JsonResponse(direction_info, safe=False)
        
@csrf_exempt
def save_question(request):
    data = json.loads(request.body)
    question_text = data['question']
    user_id = data['user_id']
    
    save_question_to_db(question_text, user_id)
    
    similar_questions = search_similar_questions(question_text)
    
    return JsonResponse({'similar_questions': similar_questions})

@csrf_exempt
def get_answer(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        question_text = data.get('question_text')
        answer = get_answer_for_question(question_text)
        return JsonResponse({'answer': answer})

progress_data = {}

def convert_to_pdf(input_file, output_folder, file_id, total_files):
    filename, _ = os.path.splitext(os.path.basename(input_file))
    output_file = os.path.join(output_folder, f"{filename}.pdf")

    # –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É LibreOffice (soffice)
    if os.name == 'nt':  # Windows
        libreoffice_path = "C:\\Program Files\\LibreOffice\\program\\soffice.exe"
    else:  # Linux
        libreoffice_path = "/usr/bin/libreoffice"

    try:
        subprocess.run([libreoffice_path, '--headless', '--convert-to', 'pdf', input_file, '--outdir', output_folder], check=True)
        progress_data[file_id] += 1
        progress_data['processed'] += 1
        return output_file
    except subprocess.CalledProcessError:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫–∏–º-–ª–∏–±–æ –æ–±—Ä–∞–∑–æ–º
        progress_data[file_id] += 1  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        progress_data['processed'] += 1
        return None

def process_files_in_batches(uploaded_files, temp_dir, file_id):
    batch_size = 10
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w', ZIP_DEFLATED) as zip_file:
        for i in range(0, len(uploaded_files), batch_size):
            batch_files = uploaded_files[i:i + batch_size]
            for uploaded_file in batch_files:
                file_path = os.path.join(temp_dir, uploaded_file.name)
                with open(file_path, 'wb') as f:
                    for chunk in uploaded_file.chunks():
                        f.write(chunk)

                pdf_path = convert_to_pdf(file_path, temp_dir, file_id, len(uploaded_files))
                if pdf_path:
                    zip_file.write(pdf_path, os.path.basename(pdf_path))

    zip_buffer.seek(0)
    return zip_buffer

def upload_file(request):
    if request.method == 'POST' and request.FILES.getlist('files'):
        uploaded_files = request.FILES.getlist('files')
        total_files = len(uploaded_files)
        file_id = str(request.user.id)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        progress_data[file_id] = 0
        progress_data['total'] = total_files
        progress_data['processed'] = 0

        with TemporaryDirectory() as temp_dir:
            zip_buffer = process_files_in_batches(uploaded_files, temp_dir, file_id)
            
            response = FileResponse(zip_buffer, content_type='application/zip')
            response['Content-Disposition'] = 'attachment; filename="converted_files.zip"'
            return response
    else:
        return JsonResponse({'error': 'Files not provided'}, status=400)

def progress(request):
    file_id = str(request.user.id)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def event_stream():
        while True:
            if file_id in progress_data:
                current = progress_data[file_id]
                total = progress_data['total']
                yield f"data: {current}/{total}\n\n"
                if progress_data['processed'] == total:
                    del progress_data[file_id]
                    break
            else:
                yield f"data: 0/0\n\n"

    return StreamingHttpResponse(event_stream(), content_type='text/event-stream')

def get_unresolved_questions_view(request):
    unresolved_questions = get_unresolved_questions()
    questions = [{'id': q[0], 'question_text': q[1]} for q in unresolved_questions]
    return JsonResponse(questions, safe=False)

@csrf_exempt
def save_answer_view(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        question_id = data.get('question_id')
        answer_text = data.get('answer')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        reg_answer(question_id, answer_text)

        return JsonResponse({'message': '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'})
    return JsonResponse({'error': 'Invalid request method.'}, status=400)

@csrf_exempt
def process_questions_file(request):
    if request.method == 'GET':
        file_path = 'questions.txt'
        output_file = 'questions_new.txt'
        
        filter_sentences(file_path, output_file)

        with open(output_file, 'rb') as file:
            response = HttpResponse(file.read(), content_type='text/plain')
            response['Content-Disposition'] = f'attachment; filename={os.path.basename(output_file)}'
            return response
    
@csrf_exempt
def upload_txt_file(request):
    if request.method == 'POST' and request.FILES.get('file'):
        txt_file = request.FILES['file']
        if txt_file.name != 'questions.txt':
            return JsonResponse({'message': '–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "questions.txt".'}, status=400)

        fs = FileSystemStorage()
        filename = 'questions.txt'
        file_path = fs.path(filename)

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if os.path.exists(file_path):
            os.remove(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        fs.save(filename, txt_file)

        return JsonResponse({'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–º–µ–Ω—ë–Ω.'})
    return JsonResponse({'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'}, status=400)